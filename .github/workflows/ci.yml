name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build & Run
        run: |
         docker network create frontend_net
         docker network create backend_net
         docker build -t frontend ./frontend/. 
         docker build -t backend  ./backend/. 
         docker build -t db ./db/. 
         docker run -d --name frontend -p 8080:80 --network frontend_net frontend
         docker run -d --name backend -p 3000:3000 -e DB_HOST=db -e DB_PORT=3306 -e DB_USER=root -e DB_PASSWORD=${{ secrets.DB_PASSWORD}} -e DB_NAME=mydatabase --network frontend_net --network backend_net backend
         docker run -d --name db -e MYSQL_ROOT_PASSWORD=${{ secrets.DB_PASSWORD }} -e MYSQL_DATABASE=mydatabase --network backend_net db

      - name: Wait for services
        run: sleep 10

      - name: Test frontend
        run: curl -f http://localhost:8080 || exit 1

      - name: Test backend
        run: curl -f http://localhost:3000 || exit 1

      - name: Stop containers
        run: docker-compose down -v


  deploy:
    runs-on: ubuntu-latest
    needs: test 
    env:
      AWS_REGION: us-east-1

    strategy:
      matrix:
        service: [frontend, backend, db]

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push frontend inage to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: my-repo
          IMAGE_TAG: ${{ matrix.service }}-${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG ./${{ matrix.service }}/.
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG